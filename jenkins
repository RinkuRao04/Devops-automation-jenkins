pipeline {
    agent any
    // environment {
    //     image_tag = 'latest' // You can adjust this as needed or make it a parameter
    //      p = sh 'echo $PATH'
    //     PATH = p + ':/usr/local/bin/docker-compose'
    // }

    stages{
        stage('Build '){
            steps{
               checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/RinkuRao04/Devops-automation-jenkins.git']])
               
               
            }
        }


        stage('Build docker image'){
            steps{
                script{
                    sh 'docker build -t reactimage .'
                    sh 'docker tag reactimage:latest rinkukunwarrao/dev:latest'

                }
            }
        }
        stage('Push image to Hub'){
            steps{
                script{
               withCredentials([string(credentialsId: 'dockerhub-pwd', variable: 'dockerhubpwd')])  {
                sh 'docker login -u rinkukunwarrao -p ${dockerhubpwd}'
                 sh 'docker push rinkukunwarrao/dev:latest'
                
                }       
              }
            }
        }
        // stage('Deploy')
        // {
        //     steps {
        //         script {
        //             def dockerCmd = 'docker run -itd --name react_container-p 3000:3000 rinkukunwarrao/dev:latest'
        //             sshagent (['sshkeypair'])
        //         }
        //     }
        // }
        stage('docker compose update'){
            steps{
               sh "sed -i 's|image: .*|image: ${DOCKER_IMAGE}|' react-deploy/docker-compose.yml"
            }
        }
       
       
//         stage ('Override env variable') {
//             steps {
//                 script {
//                     sh 'git checkout main'
//                     sh'''
//                     envsubst '$image_tag' <Docker-compose.yml > output.txt
//                     '''
//                 }
//             }
//         }
         stage('Build and Deploy') {
            steps {
                script {
                    // Run Docker Compose commands
                    sh 'docker-compose up -d'
                }
            }
        }
    }
}
